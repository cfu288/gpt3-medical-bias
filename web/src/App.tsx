import { useEffect, useState } from "react";
import { createDbWorker } from "sql.js-httpvfs";

const workerUrl = new URL(
  "sql.js-httpvfs/dist/sqlite.worker.js",
  import.meta.url
);
const wasmUrl = new URL("sql.js-httpvfs/dist/sql-wasm.wasm", import.meta.url);

async function load(query: string) {
  const worker = await createDbWorker(
    [
      {
        from: "inline",
        config: {
          serverMode: "full",
          url: import.meta.env.BASE_URL
            ? `${import.meta.env.BASE_URL}database.sqlite3`
            : "/database.sqlite3",
          requestChunkSize: 4096,
        },
      },
    ],
    workerUrl.toString(),
    wasmUrl.toString()
  );

  return await worker.db.query(query);
}

const EXAMPLE_QUERIES = {
  "Most common medications by race for chief complaint of SOB": `SELECT 
  p.race,
  h.chief_complaint,
  n.entity,
  COUNT(n.entity) AS count
FROM 
  Patient p 
JOIN History h ON  h.patient_id = p.id 
JOIN NLPEntity n ON n.history_id = h.id
WHERE
  h.chief_complaint = 'shortness-of-breath'
GROUP BY
  n.entity,
  p.race
ORDER BY COUNT(n.entity) DESC
LIMIT 50;`,
  "Show top 10 medications across all documents": `SELECT
  n.entity,
  COUNT(*) AS count
FROM
  NLPEntity n
WHERE
  n.type = 'medication'
GROUP BY
  n.entity
ORDER BY
  count DESC
LIMIT 10;`,
  "Show gender count by race (SLOW)": `SELECT
  p.race,
  p.gender,
  COUNT(*) AS count
FROM
  Patient p
GROUP BY
  p.race,
  p.gender;`,
};

function App() {
  const [rows, setRows] = useState<QueryResult[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [query, setQuery] = useState<string>(
    `SELECT 
    p.first_name,
    p.last_name,
    p.race,
    h.chief_complaint,
    h.medications,
    n.entity,
    n.loc_idx 
FROM 
    Patient p 
JOIN History h ON  h.patient_id = p.id 
JOIN NLPEntity n ON n.history_id = h.id
LIMIT 100;`
  );
  const onSubmit = () => {
    setLoading(true);
    load(query)
      .then((result) => {
        setRows(result as QueryResult[]);
        setLoading(false);
      })
      .catch((err) => {
        console.error(err);
        setLoading(false);
      });
  };

  useEffect(() => {
    onSubmit();
  }, []);

  return (
    <div className="py-10">
      <header>
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-bold leading-tight tracking-tight text-gray-900 pb-3">
            What's In A Name
          </h1>
          <p className="text-gray-400">
            This is a companion app to the{" "}
            <a
              className="font-medium text-blue-600 dark:text-blue-500 hover:underline"
              href="https://github.com/cfu288/gpt3-medical-bias"
            >
              code repository on GitHub.
            </a>
          </p>
          <p className="text-gray-400">
            Explore the 50,000 medical documents generated by gpt-3.5-turbo.
          </p>
        </div>
      </header>
      <main>
        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          {/* Divider */}
          <div className="relative py-4">
            <div
              className="absolute inset-0 flex items-center"
              aria-hidden="true"
            >
              <div className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center">
              <span className="bg-white px-2 text-gray-500"></span>
            </div>
          </div>
          {/* Text entry */}
          <label
            htmlFor="search"
            className="block text-sm font-medium leading-6 text-gray-900"
          >
            Enter your SQLite query below and press the arrow on the right to
            execute it. See the database schema{" "}
            <a
              className="font-medium text-blue-600 dark:text-blue-500 hover:underline"
              href="https://github.com/cfu288/gpt3-medical-bias/blob/main/notebooks/schema.sql"
            >
              here
            </a>
            .
          </label>
          <p className="block text-sm font-medium leading-6 text-gray-900">
            Or, try one of these example queries:
            {Object.entries(EXAMPLE_QUERIES).map(([name, query]) => (
              <button
                key={name}
                type="button"
                className="m-1 rounded-md bg-white px-2.5 py-1 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                onClick={() => setQuery(query)}
              >
                {name}
              </button>
            ))}
          </p>
          <div className="relative mt-2 flex items-center">
            <textarea
              rows={5}
              name="search"
              id="search"
              className="block w-full rounded-md border-0 p-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 relative pr-10"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
            />
            <button
              className="absolute inset-y-0 right-0 flex py-1.5 pr-1.5 z-10 h-full"
              onClick={onSubmit}
            >
              <kbd className="max-h-12 transition inline-flex items-center rounded border border-gray-200 hover:border-gray-400 hover:text-gray-500 px-1 font-sans text-xs text-gray-400 h-full self-center">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth="1.5"
                  stroke="currentColor"
                  className="w-6 h-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5"
                  />
                </svg>
              </kbd>
            </button>
          </div>
          <div>
            <div className="animate-pulse flex">
              <div className="flex-1 p-4">
                <div className="h-4">
                  <div
                    className={`h-2 bg-slate-300 rounded transition duration-300 ease-out ${
                      loading ? "opacity-100 scale-100" : "opacity-0 scale-90"
                    }`}
                  ></div>
                </div>
              </div>
            </div>
          </div>
          <div className="flow-root">
            <div className="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
              <div className="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                <table className="min-w-full divide-y divide-gray-300 table-fixed">
                  <thead>
                    <tr>
                      {rows?.[0] &&
                        Object.keys(rows?.[0]).map((key) => (
                          <th
                            key={key}
                            scope="col"
                            className="px-3 py-2 text-left text-sm font-semibold text-gray-900"
                          >
                            {key}
                          </th>
                        ))}
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {rows.map((person) => (
                      <tr key={Object.values(person).join("|")}>
                        {Object.values(person).map((value) => (
                          <td
                            key={`td-${
                              person.first_name + person.last_name
                            }-${value}`}
                            className="px-3 py-2 text-sm text-gray-500"
                          >
                            {value}
                          </td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </main>
      <button
        type="button"
        className="sticky bottom-4 float-right m-4 rounded-md bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
        onClick={() => {
          const json = JSON.stringify(rows, null, 2);
          const blob = new Blob([json], { type: "application/json" });
          const href = URL.createObjectURL(blob);
          window.open(href);
        }}
      >
        Download Data
      </button>
    </div>
  );
}

export default App;

export interface QueryResult {
  id: any;
  first_name: string;
  last_name: string;
  age: number;
  gender: string;
  race: string;
  patient_id: number;
  chief_complaint: string;
  history_of_present_illness: string;
  review_of_symptoms__constitutional: string;
  review_of_symptoms__cardiovascular: string;
  review_of_symptoms__respiratory: string;
  review_of_symptoms__gi: string;
  review_of_symptoms__gu: string;
  review_of_symptoms__musculoskeletal: string;
  review_of_symptoms__skin: string;
  review_of_symptoms__neurologic: string;
  past_medical_history: string;
  medications: string;
  past_surgical_history: string;
  family_history: string;
  social_history: string;
  FOREIGN: any;
}
